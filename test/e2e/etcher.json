{
  "name": "etcher",
  "url": "git@github.com:resin-io/etcher.git",
  "reference": "8d863638cc51994ed3de79ce25097f965b88ce04",
  "result": {
    "public": true,
    "license": "Apache-2.0",
    "contributing": "Contributing Guide\n==================\n\nThanks for your interest in contributing to this project! This document aims to\nserve as a friendly guide for making your first contribution.\n\nHigh-level Etcher overview\n--------------------------\n\nMake sure you checkout our [ARCHITECTURE.md][ARCHITECTURE] guide, which aims to\nexplain how all the pieces fit together.\n\nDeveloping\n----------\n\n### Prerequisites\n\n#### Common\n\n- [NodeJS](https://nodejs.org) (at least v6)\n- [Python 2.7](https://www.python.org)\n- [jq](https://stedolan.github.io/jq/)\n- [curl](https://curl.haxx.se/)\n\n```sh\npip install -r requirements.txt\n```\n\nYou might need to run this with `sudo` or administrator permissions.\n\n#### Windows\n\n- [NSIS v2.51](http://nsis.sourceforge.net/Main_Page) (v3.x won't work)\n- Either one of the following:\n  - [Visual C++ 2015 Build Tools](http://landinghub.visualstudio.com/visual-cpp-build-tools) containing standalone compilers, libraries and scripts\n  - Install the [windows-build-tools](https://github.com/felixrieseberg/windows-build-tools) via npm with `npm install --global windows-build-tools`\n  - [Visual Studio Community 2015](https://www.microsoft.com/en-us/download/details.aspx?id=48146) (free) (other editions, like Professional and Enterprise, should work too)\n    **NOTE:** Visual Studio 2015 doesn't install C++ by default. You have to rerun the\n    setup, select \"Modify\" and then check `Visual C++ -> Common Tools for Visual\n    C++ 2015` (see http://stackoverflow.com/a/31955339)\n- [MinGW](http://www.mingw.org)\n\nYou might need to `npm config set msvs_version 2015` for node-gyp to correctly detect\nthe version of Visual Studio you're using (in this example VS2015).\n\nThe following MinGW packages are required:\n\n- `msys-make`\n- `msys-unzip`\n- `msys-zip`\n- `msys-bash`\n- `msys-coreutils`\n\n#### OS X\n\n- [XCode](https://developer.apple.com/xcode/) or [XCode Command Line Tools],\nwhich can be installed by running `xcode-select --install`.\n\n#### Linux\n\n- `libudev-dev` for libusb (install with `sudo apt install libudev-dev` for example)\n\n### Cloning the project\n\n```sh\ngit clone https://github.com/resin-io/etcher\ncd etcher\n```\n\n### Installing npm dependencies\n\n**NOTE:** Please make use of the following command to install npm dependencies rather\nthan simply running `npm install` given that we need to do extra configuration\nto make sure native dependencies are correctly compiled for Electron, otherwise\nthe application might not run successfully.\n\nIf you're on Windows, **run the command from the _Developer Command Prompt for\nVS2015_**, to ensure all Visual Studio command utilities are available in the\n`%PATH%`.\n\n```sh\nmake electron-develop\n```\n\n### Running the application\n\n#### GUI\n\n```sh\nnpm start\n```\n\n#### CLI\n\n```sh\nnode bin/etcher\n```\n\nTesting\n-------\n\nTo run the test suite, run the following command:\n\n```sh\nnpm test\n```\n\nGiven the nature of this application, not everything can be unit tested. For\nexample:\n\n- The writing operating on real raw devices.\n- Platform inconsistencies.\n- Style changes.\n- Artwork.\n\nWe encourage our contributors to test the application on as many operating\nsystems as they can before sending a pull request.\n\n*The test suite is run automatically by CI servers when you send a pull\nrequest.*\n\nWe also rely on various `make` targets to perform some common tasks:\n\n- `make lint`: Run the linter.\n- `make sass`: Compile SCSS files.\n\nWe make use of [EditorConfig] to communicate indentation, line endings and\nother text editing default. We encourage you to install the relevant plugin in\nyour text editor of choice to avoid having to fix any issues during the review\nprocess.\n\nUpdating a dependency\n---------------------\n\nGiven we use [npm shrinkwrap][shrinkwrap], we have to take extra steps to make\nsure the `npm-shrinkwrap.json` file gets updated correctly when we update a\ndependency.\n\nUse the following steps to ensure everything goes flawlessly:\n\n- Run `make electron-develop` to ensure you don't have extraneous dependencies\n  you might have brought during development, or you are running older\n  dependencies because you come from another branch or reference.\n\n- Install the new version of the dependency. For example: `npm install --save\n  <package>@<version>`. This will update the `npm-shrinkwrap.json` file.\n\n- Commit *both* `package.json` and `npm-shrinkwrap.json`.\n\nDiffing Binaries\n----------------\n\nBinary files are tagged as \"binary\" in the `.gitattributes` file, but also have\na `diff=hex` tag, which allows you to see hexdump-style diffs for binaries,\nif you add the following to either your global or repository-local git config:\n\n```sh\n$ git config diff.hex.textconv hexdump\n$ git config diff.hex.binary true\n```\n\nAnd global, respectively:\n\n```sh\n$ git config --global diff.hex.textconv hexdump\n$ git config --global diff.hex.binary true\n```\n\nIf you don't have `hexdump` available on your platform,\nyou can try [hxd], which is also a bit faster.\n\nCommit Guidelines\n-----------------\n\nSee [COMMIT-GUIDELINES.md][COMMIT-GUIDELINES] for a thorough guide on how to\nwrite commit messages.\n\nSending a pull request\n----------------------\n\nWhen sending a pull request, consider the following guidelines:\n\n- Write a concise commit message explaining your changes.\n\n- If applies, write more descriptive information in the commit body.\n\n- Mention the operating systems with the corresponding versions in which you\ntested your changes.\n\n- If your change affects the visuals of the application, consider attaching a\nscreenshot.\n\n- Refer to the issue/s your pull request fixes, so they're closed automatically\nwhen your pull request is merged.\n\n- Write a descriptive pull request title.\n\n- Squash commits when possible, for example, when committing review changes.\n\nBefore your pull request can be merged, the following conditions must hold:\n\n- The linter doesn't throw any warning.\n\n- All the tests passes.\n\n- The coding style aligns with the project's convention.\n\n- Your changes are confirmed to be working in recent versions of the operating\nsystems we support.\n\nDon't hesitate to get in touch if you have any questions or need any help!\n\n[ARCHITECTURE]: https://github.com/resin-io/etcher/blob/master/docs/ARCHITECTURE.md\n[COMMIT-GUIDELINES]: https://github.com/resin-io/etcher/blob/master/docs/COMMIT-GUIDELINES.md\n[EditorConfig]: http://editorconfig.org\n[shrinkwrap]: https://docs.npmjs.com/cli/shrinkwrap\n[hxd]: https://github.com/jhermsmeier/hxd\n[XCode Command Line Tools]: https://developer.apple.com/library/content/technotes/tn2339/_index.html\n",
    "architecture": "Etcher Architecture\n===================\n\nThis document aims to serve as a high-level overview of how Etcher works,\nspecially oriented for contributors who want to understand the big picture.\n\nTechnologies\n------------\n\nThis is a non exhaustive list of the major frameworks, libraries, and other\ntechnologies used in Etcher that you should become familiar with:\n\n- [Electron][electron]\n- [NodeJS][nodejs]\n- [AngularJS][angularjs]\n- [Redux][redux]\n- [ImmutableJS][immutablejs]\n- [Bootstrap][bootstrap]\n- [Sass][sass]\n- [Flexbox Grid][flexbox-grid]\n- [Mocha][mocha]\n- [JSDoc][jsdoc]\n\nModule architecture\n-------------------\n\nInstead of embedding all the functionality required to create a full-featured\nimage writer as a monolithic project, we try to hard to follow the [\"lego block\napproach\"][lego-blocks].\n\nThis has the advantage of allowing other applications to re-use logic we\nimplemented for Etcher in their own project, even for things we didn't expect,\nwhich leads to users benefitting from what we've built, and we benefitting from\nuser's bug reports, suggestions, etc, as an indirect way to make Etcher better.\n\nThe fact that low-level details are scattered around many different modules can\nmake it challenging for a new contributor to wrap their heads around the\nproject as a whole, and get a clear high level view of how things work or where\nto submit their work or bug reports.\n\nThese are the main Etcher components, in a nutshell:\n\n- [Etcher Image Write][etcher-image-write]\n\nThis is the repository that implements the actual procedures to write an image\nto a raw device and the place where image validation resides. Its main purpose\nis to abstract the messy details of interacting with raw devices in all major\noperating systems.\n\n- [Etcher Image Stream](../lib/image-stream)\n\n> (Moved from a separate repository into the main Etcher codebase)\n\nThis module converts any kind of input into a readable stream\nrepresenting the image so it can be plugged to [etcher-image-write]. Inputs\nthat this module might handle could be, for example: a simple image file, a URL\nto an image, a compressed image, an image inside a ZIP archive, etc. Together\nwith [etcher-image-write], these modules are the building blocks needed to take\nan image representation to the user's device, the \"Etcher's backend\".\n\n- [Drivelist](https://github.com/resin-io-modules/drivelist)\n\nAs the name implies, this module's duty is to detect the connected drives\nuniformly in all major operating systems, along with valuable metadata, like if\na drive is removable or not, to prevent users from trying to write an image to\na system drive.\n\n- [Etcher](https://github.com/resin-io/etcher)\n\nThis is the *\"main repository\"*, from which you're reading this from, which is\nbasically the front-end and glue for all previously listed projects.\n\nFront-ends\n----------\n\nThe main repository consists of the implementation of the Etcher CLI and the\nEtcher GUI (the desktop application), located at [`lib/cli/`][cli-dir] and\n[`lib/gui/`][gui-dir], respectively.\n\nIn fact, the only front-end that interacts directly with Etcher's backend is\nthe CLI. The GUI merely forks the CLI and communicates with its child process\nto get state information.\n\nIn this sense, you can consider the GUI as being the front-end to the CLI,\nwhich is in turn the front-end to the actual image writing functionality.\n\nAs a way to simplify how the GUI forks the CLI in a packaged and distributed\ncontext, both the CLI and GUI share the same application entry point. This\nmeans that the same Etcher binary can behave as CLI or GUI as needed.\n\n## Process communication\n\nAs mentioned before, the Etcher GUI forks the CLI and retrieves information\nfrom it to update its state. In order to accomplish this, the Etcher CLI\ncontains certain features to ease communication:\n\n- [Well-documented exit codes.][exit-codes]\n\n- An environment variable called `ETCHER_CLI_ROBOT` option, which when set\n  causes the Etcher CLI to output state in a way that can be easily\n  parsed by a machine.\n\nSummary\n-------\n\nWe always welcome contributions to Etcher as well as our documentation. If you\nwant to give back, but feel that your knowledge on how Etcher works is not\nenough to tackle a bug report or feature request, use that as your advantage,\nsince fresh eyes could help unveil things that we take for granted, but should\nbe documented instead!\n\n[lego-blocks]: https://github.com/sindresorhus/ama/issues/10#issuecomment-117766328\n[etcher-image-write]: https://github.com/resin-io-modules/etcher-image-write\n[exit-codes]: https://github.com/resin-io/etcher/blob/master/lib/shared/exit-codes.js\n[cli-dir]: https://github.com/resin-io/etcher/tree/master/lib/cli\n[gui-dir]: https://github.com/resin-io/etcher/tree/master/lib/gui\n[electron]: http://electron.atom.io\n[nodejs]: https://nodejs.org\n[angularjs]: https://angularjs.org\n[redux]: http://redux.js.org\n[immutablejs]: http://facebook.github.io/immutable-js/\n[bootstrap]: http://getbootstrap.com\n[sass]: http://sass-lang.com\n[flexbox-grid]: http://flexboxgrid.com\n[mocha]: http://mochajs.org\n[jsdoc]: http://usejsdoc.org\n",
    "integrations": [
      "appveyor",
      "travis-ci"
    ],
    "dependencies": [
      "angular",
      "angular-if-state",
      "angular-middle-ellipses",
      "angular-moment",
      "angular-seconds-to-date",
      "angular-ui-bootstrap",
      "angular-ui-router",
      "bindings",
      "blockmap",
      "bluebird",
      "bluebird-retry",
      "bootstrap-sass",
      "chalk",
      "command-join",
      "crc32-stream",
      "debug",
      "drivelist",
      "electron-is-running-in-asar",
      "file-type",
      "flexboxgrid",
      "gpt",
      "immutable",
      "lodash",
      "lzma-native",
      "mbr",
      "mime-types",
      "mountutils",
      "nan",
      "node-ipc",
      "node-stream-zip",
      "path-is-inside",
      "pipage",
      "pretty-bytes",
      "prop-types",
      "react",
      "react-dom",
      "react2angular",
      "readable-stream",
      "redux",
      "request",
      "resin-cli-form",
      "resin-cli-visuals",
      "resin-corvus",
      "semver",
      "speedometer",
      "sudo-prompt",
      "trackjs",
      "udif",
      "unbzip2-stream",
      "usb",
      "uuid",
      "winusb-driver-generator",
      "xml2js",
      "yargs",
      "yauzl"
    ]
  }
}
